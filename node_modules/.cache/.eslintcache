[{"/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/index.js":"1","/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/App.js":"2","/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/DiaryEditor.jsx":"3","/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/DiaryList.jsx":"4","/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/DiaryItem.jsx":"5","/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/lifecylce.jsx":"6"},{"size":219,"mtime":1646380377916,"results":"7","hashOfConfig":"8"},{"size":2601,"mtime":1647242860843,"results":"9","hashOfConfig":"8"},{"size":1489,"mtime":1646636695722,"results":"10","hashOfConfig":"8"},{"size":605,"mtime":1646732831293,"results":"11","hashOfConfig":"8"},{"size":2085,"mtime":1646733215698,"results":"12","hashOfConfig":"8"},{"size":324,"mtime":1647067126461,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"149e0rd",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/index.js",[],[],"/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/App.js",["37","38","39","40","41"],[],"import { useEffect, useMemo, useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\nimport Lifecylce from './lifecylce';\n\n//https://jsonplaceholder.typicode.com/comments\n\nconst App = () => {\n  const [data, setData] = useState([]);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      'https://jsonplaceholder.typicode.com/comments'\n    ).then((res) => res.json());\n    console.log(res);\n    //원하는 json값만 불러올꺼야 fecth를 통해서\n\n    const initData = res.slice(0, 20).map((it) => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: 5,\n        id: dataId.current++,\n      };\n    });\n    setData(initData);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      getData();\n    }, 1500);\n  }, []);\n\n  // data에 새로운 일기를 추가하는 함수 (일기 데이터를 추가 할 수 있는 함수를 Editor컴포에 전달)\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n\n  const onRemove = (targetId) => {\n    const newDiaryList = data.filter((it) => it.id !== targetId); //it.id가 targetId가 아니면\n    setData(newDiaryList);\n  };\n\n  const onEdit = (targetId, newContent) => {\n    setData(\n      data.map(\n        (\n          it // 원본 데이터 배열에 map함수를 이용하여 모든 요소를 순회하면서 새로운 배열을 만들어서 setData에 전달할꺼야 새로운 배열이란 수정이 완료된 컨텐츠를 말함\n        ) => (it.id === targetId ? { ...it, content: newContent } : it) // 모든데이터중에 수정할데이터가 같다면 컨텐츠를 새로운 (수정)컨텐츠 값으로 변경 그게 아니라면 원본\n      )\n    );\n  };\n\n  const getDiaryAnalysis = useMemo(() => {\n    if (data.length === 0) {\n      return { goodCount: 0, badCount: 0, goodRatio: 0 };\n    }\n\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100.0;\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis;\n\n  return (\n    <>\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList onEdit={onEdit} diarylist={data} onRemove={onRemove} />\n    </>\n  );\n};\nexport default App;\n","/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/DiaryEditor.jsx",[],[],["42","43"],"/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/DiaryList.jsx",[],[],["44","45"],"/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/DiaryItem.jsx",[],[],"/Users/gimgilhwan/Desktop/frontend/simplediary/sampleDiary/src/lifecylce.jsx",["46"],[],"import React, { useEffect, useState } from 'react';\n\nconst Lifecylce = (props) => {\n  const [isVisbel, setIsVisble] = useState(false);\n  const toggle = () => setIsVisble(!isVisbel);\n\n  return (\n    <>\n      <div>\n        <button onClick={toggle}>보여지기</button>\n      </div>\n    </>\n  );\n};\n\nexport default Lifecylce;\n",["47","48"],{"ruleId":"49","severity":1,"message":"50","line":5,"column":8,"nodeType":"51","messageId":"52","endLine":5,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":76,"column":6,"nodeType":"55","endLine":76,"endColumn":19,"suggestions":"56"},{"ruleId":"49","severity":1,"message":"57","line":78,"column":11,"nodeType":"51","messageId":"52","endLine":78,"endColumn":20},{"ruleId":"49","severity":1,"message":"58","line":78,"column":22,"nodeType":"51","messageId":"52","endLine":78,"endColumn":30},{"ruleId":"49","severity":1,"message":"59","line":78,"column":32,"nodeType":"51","messageId":"52","endLine":78,"endColumn":41},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"49","severity":1,"message":"66","line":1,"column":17,"nodeType":"51","messageId":"52","endLine":1,"endColumn":26},{"ruleId":"60","replacedBy":"67"},{"ruleId":"62","replacedBy":"68"},"no-unused-vars","'Lifecylce' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["69"],"'goodCount' is assigned a value but never used.","'badCount' is assigned a value but never used.","'goodRatio' is assigned a value but never used.","no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"'useEffect' is defined but never used.",["70"],["71"],{"desc":"72","fix":"73"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [data]",{"range":"74","text":"75"},[2043,2056],"[data]"]